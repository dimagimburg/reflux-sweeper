{"version":3,"sources":["../../src/Stores/BoardStore.js"],"names":[],"mappings":"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","file":"BoardStore.js","sourcesContent":["import Utilities from './../Utils';\r\nimport Actions from './../Actions/Actions';\r\nimport GameStore from './GameStore';\r\n\r\nvar getTileByDirection = function(direction,board,id){\r\n\r\n    var isEdgeEast = function(id){\r\n        return id % GameStore.cols == GameStore.cols - 1;\r\n    };\r\n\r\n    var isEdgeWest = function(id) {\r\n        return id % GameStore.cols == 0;\r\n    };\r\n\r\n    var tileByDirections = {\r\n\r\n        n(board,id) {\r\n            return (id - GameStore.cols < 0) ? null : board.get(id - GameStore.cols);\r\n        },\r\n\r\n        s(board,id) {\r\n            return (id + GameStore.cols > GameStore.cols * GameStore.rows - 1) ? null : board.get(id + GameStore.cols);\r\n        },\r\n\r\n        e(board,id) {\r\n            return isEdgeEast(id) ? null : board.get(id + 1);\r\n        },\r\n\r\n        w(board,id) {\r\n            return isEdgeWest(id) ? null : board.get(id - 1);\r\n        },\r\n\r\n        ne(board,id) {\r\n            return (isEdgeEast(id) || id - GameStore.cols + 1 < 0) ? null : board.get(id - GameStore.cols + 1);\r\n        },\r\n\r\n        se(board,id) {\r\n            return (isEdgeEast(id) || id + GameStore.cols + 1 > GameStore.cols * GameStore.rows - 1) ? null : board.get(id + GameStore.cols + 1);\r\n        },\r\n\r\n        sw(board,id) {\r\n            return (isEdgeWest(id) || id + GameStore.cols - 1 > GameStore.cols * GameStore.rows - 1) ? null : board.get(id + GameStore.cols - 1);\r\n        },\r\n\r\n        nw(board,id) {\r\n            return (isEdgeWest(id) || id - GameStore.cols - 1 < 0) ? null : board.get(id - GameStore.cols - 1);\r\n        }\r\n    };\r\n\r\n    return tileByDirections[direction](board,id);\r\n\r\n};\r\n\r\nlet Store = Reflux.createStore({\r\n\r\n    listenables: [Actions],\r\n\r\n    init() {\r\n        this.board = Utilities.getDefaultBoard(GameStore.rows,GameStore.cols,GameStore.mines);\r\n    },\r\n\r\n    getBoard() {\r\n        return this.board;\r\n    },\r\n\r\n    getTile(id) {\r\n       return Immutable.fromJS(_.find(this.board.toJS(), function(tile){ return tile.id === id; }));\r\n    },\r\n\r\n    onRevealTile(id) {\r\n        Actions.gameOn();\r\n        var oldTile = this.board.get(id);\r\n        var tileProps = this.getTileProps(id);\r\n        var newTile = oldTile.set('isRevealed',true);\r\n        if(!newTile.get('isMine')) newTile = newTile.set('minesAround',tileProps.minesAround);\r\n        this.board = this.board.setIn([id],newTile);\r\n        if(newTile.get('isMine')){\r\n            this.endGame();\r\n        } else {\r\n            this.tryToWin(id);\r\n            if(this.isWinner()){\r\n                this.win();\r\n            }\r\n            this.updateBoard(this.board);\r\n        }\r\n    },\r\n\r\n    isWinner(){\r\n        var winner = true;\r\n        this.board.map(function(tile){\r\n            if(!tile.get('isRevealed') && !tile.get('isMine')){\r\n                winner = false;\r\n            }\r\n        });\r\n        return winner;\r\n    },\r\n\r\n    win(){\r\n        Actions.winGame();\r\n    },\r\n\r\n    tryToWin(id) {\r\n        Utilities.getDirections().map(function(dir){\r\n            var currentTile = getTileByDirection(dir,this.board,id);\r\n            var tileProps = currentTile ? this.getTileProps(currentTile.get('id')) : null;\r\n            if (currentTile && !currentTile.get('isMine') && !currentTile.get('isRevealed') && !currentTile.get('isFlag')){\r\n                if(tileProps.isSafe){\r\n                    this.board = this.board.setIn([currentTile.get('id')],currentTile.set('isRevealed',true));\r\n                    this.tryToWin(currentTile.get('id'));\r\n                } else {\r\n                    this.board = this.board.setIn([currentTile.get('id')],currentTile.set('isRevealed',true).set('minesAround',tileProps.minesAround));\r\n                }\r\n            }\r\n        }.bind(this));\r\n    },\r\n\r\n    getTileProps(id) {\r\n        var safe = true;\r\n        var minesAround = 0;\r\n        Utilities.getDirections().map(function(dir){\r\n            if(getTileByDirection(dir,this.board,id)){\r\n                if(getTileByDirection(dir,this.board,id).get('isMine')){\r\n                    minesAround++;\r\n                    safe = false;\r\n                }\r\n            }\r\n        }.bind(this));\r\n\r\n        return {\r\n            'isSafe':safe,\r\n            'minesAround':minesAround\r\n        };\r\n    },\r\n\r\n    endGame() {\r\n        Actions.gameOver();\r\n        var newBoard = this.board.map(function(tile){\r\n            return tile.get('isMine') ? tile.set('isRevealed',true).set('isFlag',false) : tile;\r\n        });\r\n        this.updateBoard(newBoard);\r\n    },\r\n\r\n    onNewGame() {\r\n        this.updateBoard(Utilities.getDefaultBoard(GameStore.rows,GameStore.cols,GameStore.mines));\r\n    },\r\n\r\n    onToggleFlag(id) {\r\n        var newTile = this.board.get(id).set('isFlag',!this.board.get(id).get('isFlag'));\r\n        newTile.get('isFlag') ? Actions.reduceFlagsCount() : Actions.increaseFlagsCount();\r\n        var newBoard = this.board.setIn([id],newTile);\r\n        this.updateBoard(newBoard);\r\n    },\r\n\r\n    updateBoard(board) {\r\n        this.board = board;\r\n        this.trigger(board); // sends the updated board to all listening components (GameBoard)\r\n    }\r\n\r\n});\r\n\r\nexport default Store;"]}