{"version":3,"sources":["../src/Utils.js"],"names":[],"mappings":";;;;;AAAA,IAAI,SAAS,GAAG,CAAC,YAAU;AACvB,WAAO;;AAEH,iCAAyB,EAAE,mCAAS,KAAK,EAAC,YAAY,EAAC;AACnD,gBAAI,MAAM,GAAG,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC;AACxC,gBAAI,MAAM,GAAG,EAAE,CAAC;AAChB,iBAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,IAAE,YAAY,EAAC;AACvC,sBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;aACjD;AACD,mBAAO,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SACnC;;AAED,uBAAe,EAAE,yBAAS,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE;AACzC,mBAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;SAC5C;;AAED,iBAAS,EAAE,mBAAS,IAAI,EAAE,IAAI,EAAE,aAAa,EAAC;AAC1C,gBAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;AAC5C,gBAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAC,IAAI,EAAC,aAAa,CAAC,CAAC;AACtD,gBAAI,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;AACrD,mBAAO,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAS,IAAI,EAAE,GAAG,EAAC;AACrD,uBAAO,IAAI,CAAC,GAAG,CAAC,IAAI,EAAC,GAAG,CAAC,CAAC;aAC7B,CAAC,CAAC;SACN;;AAED,mBAAW,EAAE,qBAAS,aAAa,EAAC;AAChC,gBAAI,KAAK,GAAG,EAAE,CAAC;AACf,mBAAM,aAAa,EAAE,EAAC;AAClB,qBAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAC,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC;aAC/F;AACD,mBAAO,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAChC;;AAED,mBAAW,EAAE,qBAAS,IAAI,EAAC,IAAI,EAAC,aAAa,EAAC;AAC1C,gBAAI,aAAa,GAAG,AAAC,IAAI,GAAG,IAAI,GAAI,aAAa,CAAC;AAClD,gBAAI,KAAK,GAAG,EAAE,CAAC;AACf,mBAAM,aAAa,EAAE,EAAC;AAClB,qBAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC;aAChG;AACD,mBAAO,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAChC;;AAED,qBAAa,EAAE,yBAAU;AACrB,mBAAO,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,CAAC,CAAC;SAChD;;KAEJ,CAAC;CACL,CAAA,EAAG,CAAC;;qBAEU,SAAS","file":"Utils.js","sourcesContent":["var Utilities = (function(){\r\n    return {\r\n\r\n        createBoardTwoDimensional: function(tiles,numberOfRows){\r\n            var length = tiles.size || tiles.length;\r\n            var result = [];\r\n            for(var i = 0; i < length; i+=numberOfRows){\r\n                result.push(tiles.slice(i, i + numberOfRows));\r\n            }\r\n            return Immutable.fromJS(result);\r\n        },\r\n\r\n        getDefaultBoard: function(rows, cols, mines) {\r\n            return this.initBoard(rows, cols, mines);\r\n        },\r\n\r\n        initBoard: function(rows, cols, numberOfMines){\r\n            let mines = this.createMines(numberOfMines);\r\n            let tiles = this.createTiles(rows,cols,numberOfMines);\r\n            let shuffled = _.shuffle(mines.concat(tiles).toJS());\r\n            return Immutable.fromJS(shuffled).map(function(tile, idx){\r\n                return tile.set('id',idx);\r\n            });\r\n        },\r\n\r\n        createMines: function(numberOfMines){\r\n            let mines = [];\r\n            while(numberOfMines--){\r\n                mines.push(Immutable.Map({isMine: true, isRevealed: false, minesAround: 0, isFlag: false}));\r\n            }\r\n            return Immutable.List(mines);\r\n        },\r\n\r\n        createTiles: function(rows,cols,numberOfMines){\r\n            let numberOfTiles = (rows * cols) - numberOfMines;\r\n            let tiles = [];\r\n            while(numberOfTiles--){\r\n                tiles.push(Immutable.Map({isMine: false, isRevealed: false, minesAround: 0, isFlag: false}));\r\n            }\r\n            return Immutable.List(tiles);\r\n        },\r\n\r\n        getDirections: function(){\r\n            return ['n','s','e','w','ne','nw','se','sw'];\r\n        }\r\n\r\n    };\r\n})();\r\n\r\nexport default Utilities;"]}